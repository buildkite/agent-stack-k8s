fragment Job on Job {
    ... on JobTypeCommand {
        ...CommandJob
    }
}

fragment CommandJob on JobTypeCommand {
    uuid
    env
    priority {
        number
    }
    agentQueryRules
    command
}

fragment Build on Build {
    uuid
    id
    number
    state
    jobs(first: 100) {
        edges {
            # @genqlient(flatten: true)
            node {
                ...Job
            }
        }
    }
}

mutation BuildCreate($input: BuildCreateInput!) {
    buildCreate(input: $input) {
        build {
            ...Build
        }
    }
}

mutation BuildCancel($input: BuildCancelInput!) {
    buildCancel(input: $input) {
        clientMutationId
    }
}

query GetOrganization($slug: ID!) {
    organization(slug: $slug) {
        id
    }
}

query GetBuild($uuid: ID!) {
    build(uuid: $uuid) {
        ...Build
    }
}

query GetScheduledJobs(
    $slug: ID!, 
    $agentQueryRules: [String!], 
    $last: Int!
    # @genqlient(pointer: true)
    $cursor: String
) {
    organization(slug: $slug) {
        # @genqlient(pointer: true)
        id
        jobs(
            state: [SCHEDULED]
            type: [COMMAND]
            last: $last
            order: RECENTLY_CREATED
            agentQueryRules: $agentQueryRules
            clustered: false
            before: $cursor
        ) {
            count
            edges {
                # @genqlient(flatten: true)
                node {
                    ...Job
                }
            }
            pageInfo{
                hasPreviousPage
                startCursor
            }
        }
    }
}

query GetScheduledJobsClustered(
    $slug: ID!
    $agentQueryRules: [String!]
    $cluster: ID!
    $last: Int!
    # @genqlient(pointer: true)
    $cursor: String
) {
    organization(slug: $slug) {
        # @genqlient(pointer: true)
        id
        jobs(
            state: [SCHEDULED]
            type: [COMMAND]
            last: $last
            order: RECENTLY_CREATED
            agentQueryRules: $agentQueryRules
            cluster: $cluster
            before: $cursor
        ) {
            count
            edges {
                # @genqlient(flatten: true)
                node {
                    ...Job
                }
            }
            pageInfo{
                hasPreviousPage
                startCursor
            }
        }
    }
}

query GetBuilds($slug: ID!, $state: [BuildStates!], $first: Int) {
    pipeline(slug: $slug) {
        builds(state: $state, first: $first) {
            edges {
                node {
                    ...Build
                }
            }
        }
    }
}

query GetCommandJob($uuid: ID!) {
    job(uuid: $uuid) {
        ... on JobTypeCommand {
            id
            state
        }
    }
}

mutation CancelCommandJob($input: JobTypeCommandCancelInput!) {
    jobTypeCommandCancel(input: $input) {
        clientMutationId
    }
}

### The following are used in the cleanup integration "test"
mutation PipelineDelete($input: PipelineDeleteInput!) {
    pipelineDelete(input: $input) {
        clientMutationId
    }
}

query SearchPipelines($slug: ID!, $search: String!, $first: Int!) {
    organization(slug: $slug) {
        pipelines(search: $search, first: $first) {
            edges {
                node {
                    id
                    name
                }
            }
        }
    }
}

query GetClusterQueues($slug: ID!, $cluster: ID!, $first: Int!){
  organization(slug: $slug) {
    cluster(id: $cluster){
      queues(first: $first){
        edges{
          node{
            key
            dispatchPaused
          }
        }
        pageInfo {
          hasNextPage
          endCursor
        }
      }
    }
  }
}
