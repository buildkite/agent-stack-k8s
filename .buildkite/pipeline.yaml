x-anchors:
  push-helm: &push-helm
    label: ":helm::docker: build and push helm chart"
    plugins:
      - kubernetes:
          checkout:
            fetchFlags: -v --tags
          podSpec:
            serviceAccountName: deploy
            containers:
              - name: deploy
                image: alpine:latest
                command: [.buildkite/steps/build-and-push-helm.sh]
                envFrom:
                  - secretRef:
                      name: deploy-secrets

  go-cache-env: &go-cache-env
    name: GOCACHE
    value: /var/cache/go-build
  go-mod-cache-env: &go-mod-cache-env
    name: GOMODCACHE
    value: /var/cache/go-mod

  go-cache-mount: &go-cache-mount
    name: go-build
    mountPath: /var/cache/go-build
  go-mod-cache-mount: &go-mod-cache-mount
    name: go-mod
    mountPath: /var/cache/go-mod

  go-cache-volume: &go-cache-volume
    name: go-build
    hostPath:
      path: /var/cache/buildkite/agent-stack-k8s-ci/go-build
      type: DirectoryOrCreate
  go-mod-cache-volume: &go-mod-cache-volume
    name: go-mod
    hostPath:
      path: /var/cache/buildkite/agent-stack-k8s-ci/go-mod
      type: DirectoryOrCreate

  go-env: &go-env
    - *go-cache-env
    - *go-mod-cache-env
  go-mounts: &go-mounts
    - *go-cache-mount
    - *go-mod-cache-mount
  go-volumes: &go-volumes
    - *go-cache-volume
    - *go-mod-cache-volume

agents:
  queue: kubernetes

steps:
  - label: ":go::broom: tidy"
    key: tidy
    plugins:
      - kubernetes:
          podSpec:
            containers:
              - image: golang:1.23-alpine
                command: [.buildkite/steps/tidy.sh]
                env: *go-env
                volumeMounts: *go-mounts
            volumes: *go-volumes

  - label: ":go::lint-roller: lint"
    key: lint
    plugins:
      - kubernetes:
          podSpec:
            containers:
              - image: golangci/golangci-lint:latest
                command:
                  - golangci-lint run -v ./...
                resources:
                  requests:
                    cpu: 1000m
                    memory: 1Gi
                env:
                  - name: GOLANGCI_LINT_CACHE
                    value: /var/cache/golangci-lint
                  - *go-cache-env
                  - *go-mod-cache-env
                volumeMounts:
                  - name: golangci-lint-cache
                    mountPath: /var/cache/golangci-lint
                  - *go-cache-mount
                  - *go-mod-cache-mount
            volumes:
              - name: golangci-lint-cache
                hostPath:
                  path: /var/cache/buildkite/agent-stack-k8s-ci/golangci-lint
                  type: DirectoryOrCreate
              - *go-cache-volume
              - *go-mod-cache-volume

  - label: ":golang::robot_face: check code generation"
    key: check-code-generation
    plugins:
      - kubernetes:
          podSpec:
            containers:
              - name: docker
                image: golang:1.23-alpine
                command: [.buildkite/steps/check-code-generation.sh]
                env: *go-env
                volumeMounts: *go-mounts
            volumes: *go-volumes

  - label: ":docker::buildkite: choose agent image"
    key: agent
    plugins:
      - kubernetes:
          podSpec:
            containers:
              - name: docker
                image: alpine:latest
                command: [.buildkite/steps/agent.sh]

  - label: ":buildkite::test_tube: tests"
    key: tests
    depends_on: agent
    artifact_paths: junit-*.xml
    plugins:
      - kubernetes:
          podSpec:
            serviceAccountName: integration-tests
            volumes:
              - name: agent-stack-k8s-config
                configMap:
                  name: agent-stack-k8s-config
              - *go-cache-volume
              - *go-mod-cache-volume
            containers:
              - name: tests
                image: golang:latest
                command: [.buildkite/steps/tests.sh]
                env:
                  - name: CONFIG
                    value: /etc/config.yaml
                  - *go-cache-env
                  - *go-mod-cache-env
                envFrom:
                  - secretRef:
                      name: test-secrets
                  - secretRef:
                      name: agent-stack-k8s-secrets
                volumeMounts:
                  - mountPath: /etc/config.yaml
                    name: agent-stack-k8s-config
                    subPath: config.yaml
                  - *go-cache-mount
                  - *go-mod-cache-mount
                resources:
                  requests:
                    cpu: 1000m
                    memory: 512Mi
      - test-collector:
          files: junit-*.xml
          format: junit

  - label: ":docker: build and push controller image"
    key: controller
    plugins:
      - kubernetes:
          podSpec:
            containers:
              - name: ko
                image: golang:1.23
                command: [.buildkite/steps/build-and-push-controller.sh]
                envFrom:
                  - secretRef:
                      name: deploy-secrets
                env: *go-env
                volumeMounts: *go-mounts
            volumes: *go-volumes

  # On feature branches, don't wait for tests. We may want to deploy
  # to a test cluster to debug the feature branch.
  - if: build.branch != pipeline.default_branch && build.tag !~ /^.+\$/
    <<: *push-helm
    key: push-feature-branch
    depends_on:
      - tidy
      - lint
      - check-code-generation
      - agent
      - controller

  # On the main branch or tags, wait for tests. We don't want to
  # push a new image or chart unless the tests pass.
  - if: build.branch == pipeline.default_branch || build.tag =~ /^.+\$/
    <<: *push-helm
    key: push-main-or-tag
    depends_on:
      - tidy
      - lint
      - check-code-generation
      - agent
      - controller
      - tests

  - if: build.branch == pipeline.default_branch || build.tag =~ /^.+\$/
    label: ":shipit: deploy"
    key: deploy
    depends_on:
      - push-main-or-tag
    plugins:
      - kubernetes:
          checkout:
            fetchFlags: -v --tags
          podSpec:
            serviceAccountName: deploy
            containers:
              - name: deploy
                image: alpine:latest
                command: [.buildkite/steps/deploy.sh]
                envFrom:
                  - secretRef:
                      name: deploy-secrets
                  - secretRef:
                      name: agent-stack-k8s-secrets

  - if: build.tag =~ /^.+\$/
    label: ":rocket: release"
    key: release
    depends_on:
      - deploy
    plugins:
      - kubernetes:
          checkout:
            fetchFlags: -v --tags
          podSpec:
            serviceAccountName: release
            containers:
              - name: release
                image: golang:1.23-alpine # Note goreleaser shells out to go!
                command: [.buildkite/steps/release.sh]
                envFrom:
                  - secretRef:
                      name: release-secrets
                env: *go-env
                volumeMounts: *go-mounts
            volumes: *go-volumes
